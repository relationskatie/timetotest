// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/interface.go

// Package mockstorage is a generated GoMock package.
package mockstorage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	modles "github.com/relationskatie/timetotest/internal/modles"
	storage "github.com/relationskatie/timetotest/internal/storage"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// AddNewUser mocks base method.
func (m *MockUserStorage) AddNewUser(ctx context.Context, user modles.UserDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewUser indicates an expected call of AddNewUser.
func (mr *MockUserStorageMockRecorder) AddNewUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewUser", reflect.TypeOf((*MockUserStorage)(nil).AddNewUser), ctx, user)
}

// ChangeUser mocks base method.
func (m *MockUserStorage) ChangeUser(ctx context.Context, dto modles.ChangeUserDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUser", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUser indicates an expected call of ChangeUser.
func (mr *MockUserStorageMockRecorder) ChangeUser(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUser", reflect.TypeOf((*MockUserStorage)(nil).ChangeUser), ctx, dto)
}

// DeleteUserByUsername mocks base method.
func (m *MockUserStorage) DeleteUserByUsername(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByUsername", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByUsername indicates an expected call of DeleteUserByUsername.
func (mr *MockUserStorageMockRecorder) DeleteUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByUsername", reflect.TypeOf((*MockUserStorage)(nil).DeleteUserByUsername), ctx, username)
}

// GetAllUsers mocks base method.
func (m *MockUserStorage) GetAllUsers(ctx context.Context) ([]modles.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", ctx)
	ret0, _ := ret[0].([]modles.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserStorageMockRecorder) GetAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserStorage)(nil).GetAllUsers), ctx)
}

// GetUserByID mocks base method.
func (m *MockUserStorage) GetUserByID(ctx context.Context, ID uuid.UUID) (modles.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, ID)
	ret0, _ := ret[0].(modles.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserStorageMockRecorder) GetUserByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserStorage)(nil).GetUserByID), ctx, ID)
}

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// User mocks base method.
func (m *MockInterface) User() storage.UserStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(storage.UserStorage)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockInterfaceMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockInterface)(nil).User))
}
